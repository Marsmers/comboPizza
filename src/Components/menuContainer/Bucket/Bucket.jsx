import { useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import {
	decrementQuantity,
	incrementQuantity,
	deleteOrder,
} from '../../../Redux/Reducers'
import styles from '../Bucket/Bucket.module.css'
import toast, { Toaster } from 'react-hot-toast'
import { useNavigate } from 'react-router-dom'

function Bucket() {
	const order = useSelector(state => state.counter.order)
	const dispatch = useDispatch()
	const [name, setName] = useState('')
	const [phoneNumber, setPhoneNumber] = useState('')
	const [pay, setPay] = useState('–ì–æ—Ç—ñ–≤–∫–∞')
	const [isPickupSelected, setIsPickupSelected] = useState(true)
	const [deliveryAddress, setDeliveryAddress] = useState('')
	const [deliveryTime, setDeliveryTime] = useState('')
	const [additionalNote, setAdditionalNote] = useState('')
	const navigate = useNavigate()
	console.log(isPickupSelected)
	const handleIncrement = index => {
		dispatch(incrementQuantity({ index }))
	}

	const handleDecrement = index => {
		dispatch(decrementQuantity({ index }))
	}

	const handleRemove = index => {
		dispatch(deleteOrder(index))
	}

	const calculateTotalPrice = () => {
		return order.reduce((total, item) => {
			return total + item.Price * item.quantity
		}, 0)
	}

	const handleDeliveryItem = (isPickupSelected, total) => {
		let result = ''

		if (!isPickupSelected && total >= 400) {
			result = '–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ' + total + ' –≥—Ä–Ω (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞)'
		} else if (!isPickupSelected && total < 400) {
			result = `–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${total + 50} –≥—Ä–Ω (–¥–æ—Å—Ç–∞–≤–∫–∞ + 50 –≥—Ä–Ω)`
		} else if (isPickupSelected) {
			result = `–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${total} –≥—Ä–Ω `
		}

		return result
	}

	const sendOrderToTelegram = async () => {
		const telegramBotToken = '6758664833:AAH4qB8rvdWuG8YsxrGY0M6mcNucS4gBzK8'
		const telegramChatId = '-1002071911402'
		const currentTime = new Date().toLocaleTimeString()
		const total = calculateTotalPrice()
		const deliveryInfo = isPickupSelected
			? '–°–∞–º–æ–≤–∏–≤—ñ–∑'
			: `–î–æ—Å—Ç–∞–≤–∫–∞:\n –ê–¥—Ä–µ—Å–∞: -${deliveryAddress} \n\n –ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏: -${deliveryTime}\n\n –ö–æ–º–µ–Ω—Ç–∞—Ä: -${additionalNote}`
		const totalMessage = await handleDeliveryItem(isPickupSelected, total)
		const message = `
  –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
  –Ü–º'—è: ${name}
  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phoneNumber}
  ${totalMessage}
  –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ${pay}
  
  –¢–æ–≤–∞—Ä–∏:${order
		.map((item, index) => {
			const sizeInfo = item.Size ? `\n   –†–æ–∑–º—ñ—Ä: ${item.Size}` : ''
			const crustInfo = item.hasCheeseCrust
				? `\n   –°–∏—Ä–Ω–∏–π –±–æ—Ä—Ç–∏–∫: ${item.hasCheeseCrust ? '–¢–∞–∫' : '–ù—ñ'}`
				: ''
			const separator = index === order.length ? '' : '\n'
			return `\n - ${item.Name}${sizeInfo}${crustInfo}\n   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${
				item.quantity
			} —à—Ç.\n   –¶—ñ–Ω–∞: ${item.Price * item.quantity} –≥—Ä–Ω${separator}`
		})
		.join('')}
   ${deliveryInfo}
  \n –ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${currentTime}
  `

		console.log(message)

		try {
			const response = await fetch(
				`https://api.telegram.org/bot${telegramBotToken}/sendMessage`,
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						chat_id: telegramChatId,
						text: message,
					}),
				}
			)

			const result = await response.json()
			console.log('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', result)
		} catch (error) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Telegram:', error)
		}
	}

	const handlePickup = () => {
		setIsPickupSelected(true)
	}

	const handleDelivery = () => {
		setIsPickupSelected(false)
	}

	return (
		<>
			<div className={styles.toaster}>
				<Toaster position='top-center' reverseOrder={true} />
			</div>
			<div className={styles.cons}>
				<div className={styles.coco}>
					<div className={styles.leftPage}>
						<div className={styles.containerleftPage}>
							<h1>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üõí</h1>
							{order.map(
								(
									{ Name, Price, quantity, Image, Size, hasCheeseCrust },
									index
								) => (
									<div className={styles.bucketItem} key={index}>
										<div className={styles.bucketItemStart}>
											<img src={Image} alt='' />
											<div className={styles.infoItem}>
												<h4>{Name}</h4>
												{Size ? <p>–†–æ–∑–º—ñ—Ä: {Size}</p> : ''}
												<p>{hasCheeseCrust === true ? 'C–∏—Ä–Ω–∏–π –±–æ—Ä—Ç–∏–∫' : ''}</p>
											</div>
										</div>
										<div className={styles.quantityBtn}>
											<button
												onClick={() => {
													handleDecrement(index)
												}}
											>
												-
											</button>
											<p className={styles.quantity}>{quantity}</p>
											<button
												onClick={() => {
													handleIncrement(index)
												}}
											>
												{' '}
												+{' '}
											</button>
										</div>
										<p className={styles.price}>{Price} –≥—Ä–Ω</p>
										<button
											className={styles.btnDelete}
											onClick={() => handleRemove(index)}
										>
											{' '}
											x{' '}
										</button>
									</div>
								)
							)}
							<div className={styles.totalPrice}>
								{' '}
								{handleDeliveryItem(isPickupSelected, calculateTotalPrice())}
							</div>
						</div>
						{!isPickupSelected ? (
							<p style={{ color: 'white' }}>
								{' '}
								–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 400 –≥—Ä–Ω
							</p>
						) : (
							''
						)}
					</div>
					<div className={styles.rightPage}>
						<input
							className={styles.inputRight}
							type='text'
							name='name'
							id=''
							placeholder="–Ü–º'—è"
							value={name}
							onChange={e => setName(e.target.value)}
						/>
						<input
							className={styles.inputRight}
							type='tel'
							name='phone'
							id=''
							placeholder='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É'
							value={phoneNumber}
							onChange={e => setPhoneNumber(e.target.value)}
						/>
						<textarea
							placeholder='–ö–æ–º–µ–Ω—Ç–∞—Ä...'
							value={additionalNote}
							onChange={e => setAdditionalNote(e.target.value)}
						/>
						<div className={styles.PayBtn}>
							<button
								className={`${styles.leftBtnPay} ${
									pay === '–ì–æ—Ç—ñ–≤–∫–∞' ? styles.active : ''
								}`}
								onClick={() => setPay('–ì–æ—Ç—ñ–≤–∫–∞')}
							>
								–ì–æ—Ç—ñ–≤–∫–∞
							</button>
							<button
								className={`${styles.rightBtnPay} ${
									pay === '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∞' ? styles.active : ''
								}`}
								onClick={() => setPay('–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∞')}
							>
								{' '}
								–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∞{' '}
							</button>
						</div>
						<div className={styles.deliveryBtn}>
							<button
								className={`${styles.leftBtnDelyv} ${
									isPickupSelected ? styles.active : ''
								}`}
								onClick={() => {
									handlePickup(),
										handleDeliveryItem(isPickupSelected, calculateTotalPrice())
								}}
							>
								{' '}
								–°–∞–º–æ–≤–∏–≤—ñ–∑{' '}
							</button>
							<button
								className={`${styles.rightBtnDelyv} ${
									!isPickupSelected ? styles.active : ''
								}`}
								onClick={() => {
									handleDelivery(),
										handleDeliveryItem(isPickupSelected, calculateTotalPrice())
								}}
							>
								{' '}
								–î–æ—Å—Ç–∞–≤–∫–∞{' '}
							</button>
						</div>
						{!isPickupSelected && (
							<div className={styles.rightPageDelyvery}>
								<input
									className={styles.inputRight}
									type='text'
									name=''
									id=''
									placeholder='–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'
									value={deliveryAddress}
									onChange={e => setDeliveryAddress(e.target.value)}
								/>

								<div className={styles.timeDiv}>
									<p className={styles.timeText} style={{ color: 'white' }}>
										–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ :
									</p>

									<input
										className={styles.timeInput}
										type='time'
										name=''
										id=''
										placeholder='–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏'
										value={deliveryTime}
										onChange={e => setDeliveryTime(e.target.value)}
									/>
								</div>
							</div>
						)}
						<button
							className={styles.btnBucket}
							onClick={() => {
								// –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –∑ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
								const cleanedPhoneNumber = phoneNumber.replace(/\s/g, '')

								// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
								const phoneNumberRegex =
									/^(\+380|\+38|0)?\(?(\d{2})\)?[-.\s]?(\d{3})[-.\s]?(\d{2})[-.\s]?(\d{2})$/
								const isValidPhoneNumber =
									phoneNumberRegex.test(cleanedPhoneNumber)

								// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è
								const isCartNotEmpty = order.length > 0

								// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Å—É–º–∞ –Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î 0
								const totalAmount = calculateTotalPrice()
								const isAmountNotZero = totalAmount !== 0

								// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å—ñ—Ö —É–º–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
								if (isValidPhoneNumber && isCartNotEmpty && isAmountNotZero) {
									sendOrderToTelegram()
									toast.success('–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')

									setTimeout(() => {
										navigate('/Succes')
									}, 1000)
								} else {
									// –í–∏–≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —î –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —É–º–æ–≤–∞–º
									if (!isValidPhoneNumber) {
										toast.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.')
									}

									if (!isCartNotEmpty && !isAmountNotZero) {
										toast.error('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.')
									}
								}
							}}
						>
							–ó–∞–º–æ–≤–∏—Ç–∏
						</button>
					</div>
				</div>
			</div>
		</>
	)
}

export default Bucket
